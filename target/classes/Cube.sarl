/** 
 * 
 */
package drone

import javax.vecmath.Point3f
import javax.vecmath.Vector3f
import java.lang.Math

/** 
 * @author Alexandre
 * 
 */
class Cube extends EnvObj {
	
	
	private var width : float
	
	new(){
		super()
		this.width = 0.0f
	}
	
	new(pos : Point3f, w : float){
		super(pos)
		this.width = w
	}
	
	def setWidth(w : float){
		this.width = w
	}
	
	def getWidth() : float {
		this.width
	}

def getPerpendicularVector(original : Vector3f) : Vector3f {
	var C : Vector3f
	if (original.y != 0 || original.z != 0)
		C = new Vector3f(1, 0, 0)
	else
		C = new Vector3f(0, 1, 0)
	var B : Vector3f = new Vector3f()
	B.cross(original, C)
	B
}
	
	@Override
	def computeForces(body : DroneBody, target : Sphere) : Vector3f {
		
	
		var droneToTargetVector : Vector3f = new Vector3f
		droneToTargetVector.sub(target.position, body.position) // vector from drone to target
		val distanceDroneToTarget : float = droneToTargetVector.length // absolute distance between the drone and target
		var newAcc : Vector3f = new Vector3f // acceleration to return after some modifications
		val currentSpeed : float = body.currentSpeed.length
		val objectRadius : float = this.width * 0.87f + 2.5f*(body as Cube).width // sqrt(3)/2 = 0.87
		var droneToObjectVector : Vector3f = new Vector3f // vector from drone to object i
		droneToObjectVector.sub(this.position, body.position)
		val distanceDroneToObject : float = droneToObjectVector.length // distance drone to object
		var crossProduct : Vector3f = new Vector3f
		crossProduct.cross(droneToObjectVector, droneToTargetVector)
		val distanceOfObjectToPath : float = crossProduct.length / distanceDroneToTarget // ditance between object i to droneToTargetPath
		
		//println("--length : " + distanceDroneToObject + "\n\r Drone pos : " + body.position + "\n\r CubePos : " + this.position)
		
		// collision detection:
		if (distanceOfObjectToPath < objectRadius) {
			val timeToCollision : float = (distanceDroneToObject-objectRadius) / currentSpeed
			var objectToTargetVector : Vector3f = new Vector3f
			objectToTargetVector.sub(target.position, this.position)

			// Sliding Force:
			
			// = the object is between target and drone & we are in anticipation time (tmax) :
			if ((distanceDroneToObject < distanceDroneToTarget) &&
				(objectToTargetVector.length < distanceDroneToTarget) && (timeToCollision < body.TMax)) {
				var FirstPerpendicularVector : Vector3f
				var SecondPerpendicularVector : Vector3f = new Vector3f
				var slidingForce : Vector3f = new Vector3f

				FirstPerpendicularVector = getPerpendicularVector(droneToObjectVector)
				FirstPerpendicularVector.normalize
				SecondPerpendicularVector.cross(droneToObjectVector, FirstPerpendicularVector)
				SecondPerpendicularVector.normalize
				
				// Horizontal sliding Force:
				println("Sliding force")
				println("dist : " + distanceDroneToObject)
				if ((FirstPerpendicularVector.dot(droneToTargetVector) ) < 0) {
					FirstPerpendicularVector.negate
				}

				// Vertical sliding Force:
				if ((SecondPerpendicularVector.dot(droneToTargetVector) ) < 0) {
					SecondPerpendicularVector.negate
				}

				slidingForce.add(FirstPerpendicularVector, SecondPerpendicularVector)
				slidingForce.normalize
				// for adjustment change the '5' value :
				slidingForce.scale(
					Math.abs(
						(Math.pow(5+objectRadius - distanceOfObjectToPath,2) as float / Math.pow((distanceDroneToObject-objectRadius),2) as float) * 0.1f))
				newAcc.add(slidingForce)
			}	
		}


	// We add a Repulsive force in Protected area:
		val realDistanceDroneToObject : float = distanceDroneToObject - objectRadius
		if (realDistanceDroneToObject < body.protectingSphere) {
			println("Repulsive force");
			var repulsiveForce : Vector3f = new Vector3f
			repulsiveForce = droneToObjectVector
			repulsiveForce.negate
			repulsiveForce.normalize
			// for adjustment change the '5' value :
			repulsiveForce.scale(
				Math.abs(
				((Math.pow(body.protectingSphere, 4) as float) /
					(Math.pow(realDistanceDroneToObject, 4 ) as float)) * 0.05f))
			newAcc.add(repulsiveForce)
		}
		
		return newAcc
	}
}