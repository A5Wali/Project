/** 
 * 
 */
package drone

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.util.ArrayList
import javax.vecmath.Vector3f
import java.util.List
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

/** 
 * 
 */
 
event StopDrones
agent DroneAgent {
	uses Logging, Lifecycle, CommunicationCapacity, Moving
	private var body : DroneBody
	private var target : Sphere

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent was started.")
		setSkill(new CommunicationSkill, CommunicationCapacity)
		
		setSkill(new SeekingSkill, Moving)
		val message = new Message(TypeMessage.SPAWN, "")
		sendMessage(message)
	}

	on ReceivedMessage {
		var o  = occurrence.message ;
		//info("Agent2 : Message received " + occurrence.message)
		var g = new Gson();
		if(o.type == TypeMessage.ACC){
			var token = new TypeToken<AccelerationMessage>(){}
			val messageRx : AccelerationMessage = g.fromJson(o.message, token.getType)
			val v : Vector3f = seekingFixedTarget(messageRx, this.target)
			info("Acceleration : " + v)
			val message = new Message(TypeMessage.ACC, v)
			sendMessage(message)
		} else if (o.type == TypeMessage.SPAWN) {
			this.body = g.fromJson(o.message, DroneBody)
		} else if (o.type == TypeMessage.DELETE) {
			killMe
		} else if (o.type == TypeMessage.TARGET) {
			this.target = g.fromJson(o.message, Sphere)
			info(target.radius)
		}
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}
	
	on StopDrones{
		killMe
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}

