/** 
 * 
 */
package drone

import com.google.gson.Gson
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.Socket
import java.util.Map
import java.util.UUID
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
/** 
 * @author Clément
 * 
 */
agent BufferReaderAgent {
	uses Logging, DefaultContextInteractions, Lifecycle

	var gson : Gson
	var reader : BufferedReader
	var executorService : ExecutorService

	on Initialize {
		val params = occurrence.parameters
		val socket : Socket = params.get(0) as Socket
		val is = new InputStreamReader(socket.getInputStream());
		reader = new BufferedReader(is);
		gson = new Gson()
		info("BufferReaderAgent spawned")
		executorService = Executors.newSingleThreadExecutor();
		executorService.execute(new Runnable() {
			def run() {
				while (!Thread.currentThread().isInterrupted()) {
					try {
						if (reader.ready) {
							var json = reader.readLine
							info("Line json : " + json)
							var message = gson.fromJson(json, Message)
							var uuid = message.UUID
							sendMessageToConcernedAgent(uuid, message)
						}
					} catch (e : InterruptedException) {
						e.printStackTrace()
					}
				}
			}
		});
	}
	
	

	def sendMessageToConcernedAgent(addresse : UUID, message : drone.Message) {
		addresse.willReceive(new drone.ReceivedMessage(message))
	}

	on drone.StopBuffer {
		executorService.shutdownNow;
		var sd = executorService.isTerminated
		while (!sd) {
			info("Pas terminé !")
		}
		reader.close()
		emit(new drone.CloseServer)
		killMe
	}
}
