/** 
 * 
 */
package drone

import javax.vecmath.Point3f
import javax.vecmath.Vector3f

/** 
 * @author Alexandre
 * 
 */
class Cube extends EnvObj {
	
	
	private var width : float
	
	new(){
		super()
		this.width = 0.0f
	}
	
	new(pos : Point3f, w : float){
		super(pos)
		this.width = w
	}
	
	def setWidth(w : float){
		this.width = w
	}
	
	def getWidth() : float {
		this.width
	}
	
	@Override
	def computeForces(body : DroneBody, target : Sphere) : Vector3f {
		var droneToTargetVector : Vector3f = new Vector3f
		droneToTargetVector.sub(target.position, body.position) // vector from drone to target
		val distanceDroneToTarget : float = droneToTargetVector.length // absolute distance between the drone and target
		var newAcc : Vector3f = new Vector3f // acceleration to return after some modifications
		val currentSpeed : float = body.currentSpeed.length
		val objectRadius : float = this.width * 0.87f + (body as Cube).width // sqrt(3)/2 = 0.87
		var droneToObjectVector : Vector3f = new Vector3f // vector from drone to object i
		droneToObjectVector.sub(this.position, body.position)
		val distanceDroneToObject : float = droneToObjectVector.length // distance drone to object
		var crossProduct : Vector3f = new Vector3f
		crossProduct.cross(droneToObjectVector, droneToTargetVector)
		val distanceOfObjectToPath : float = crossProduct.length / distanceDroneToTarget // ditance between object i to droneToTargetPath
		
		//println("--length : " + distanceDroneToObject + "\n\r Drone pos : " + body.position + "\n\r CubePos : " + this.position)
		
		// collision detection:
		if (distanceOfObjectToPath < objectRadius) {
			val timeToCollision : float = distanceDroneToObject / currentSpeed
			var objectToTargetVector : Vector3f = new Vector3f
			objectToTargetVector.sub(target.position, this.position)
			
			
			// Sliding Force:
			
			// = the object is between target and drone & we are in anticipation time (tmax) :
			if ((distanceDroneToObject < distanceDroneToTarget) && (objectToTargetVector.length < distanceDroneToTarget) && (timeToCollision < body.TMax)) {
				var slidingForceH : Vector3f = new Vector3f
				var slidingForceV : Vector3f = new Vector3f
				var slidingForceD : Vector3f = new Vector3f
				var slidingForce : Vector3f = new Vector3f
				
				// Horizontal sliding Force:
				println("Sliding force")
				println("dist : " + distanceDroneToObject)
				slidingForceH.cross(droneToObjectVector, new Vector3f(0, 1, 0))
				if ((slidingForceH.dot(droneToTargetVector) ) < 0 ){
					slidingForceH.negate
				}

				// Vertical sliding Force:
				slidingForceV.cross(droneToObjectVector, new Vector3f(0, 0, 1))
				if((slidingForceV.dot(droneToTargetVector) ) < 0 ){
					slidingForceV.negate
				}

				// Depth sliding Force:
				slidingForceD.cross(droneToObjectVector, new Vector3f(1, 0, 0))
				if((slidingForceD.dot(droneToTargetVector) ) < 0 ){
					slidingForceD.negate
				}
				
				slidingForce.add(slidingForceV, slidingForceH)
				slidingForce.add(slidingForceD)
				//for adjustment change the '5' value :
				slidingForce.scale((objectRadius - distanceOfObjectToPath) * 5 * (body.TMax * body.TMax / timeToCollision - body.TMax) / slidingForce.length)
				newAcc.add(slidingForce)
			}
		}

		// We add a Repulsive force in Protected area:
		val realDistanceDroneToObject : float = distanceDroneToObject - objectRadius
		if (realDistanceDroneToObject < body.protectingSphere) {
			var repulsiveForce : Vector3f = new Vector3f
			repulsiveForce = droneToObjectVector
			repulsiveForce.negate
			// for adjustment change the '5' value :
			repulsiveForce.scale((body.protectingSphere - realDistanceDroneToObject) * 5 *(body.protectingSphere * body.protectingSphere / realDistanceDroneToObject - body.protectingSphere) / repulsiveForce.length)
			newAcc.add(repulsiveForce)
		}
		
		return newAcc
	}
}
