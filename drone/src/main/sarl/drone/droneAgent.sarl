/** 
 * 
 */
package drone

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.util.UUID
import java.util.List
import javax.vecmath.Vector3f

/** 
 * @author Alexandre
 * 
 */
agent droneAgent {
	uses Logging, Lifecycle, CommunicationCapacity, Moving
	private var body : DroneBody
	private var id : UUID

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent was started.")
		setSkill(new CommunicationSkill, CommunicationCapacity)
		startServer
		setSkill(new SeekingSkill, Moving)
	}

	on ReceivedMessage {
		var o : Message<Object> = occurrence.message;
		info("Agent2 : Message re√ßu " + occurrence.message)
		if(o.type == TypeMessage.ENVOI){
			var received =  o.message as List<Cube>
		}else{
			// .... 
		}
		var list : List<Cube>
		var v = seekingFixedTarget(list, this.body)
		var message = new Message<Vector3f>(TypeMessage.ENVOI, v)
		sendMessage(message)
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}