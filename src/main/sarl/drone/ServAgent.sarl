/** 
 * 
 */
package drone
/** 
 * @author Cl√©ment
 * 
 */

import com.google.gson.Gson
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.io.BufferedReader
import java.io.PrintWriter
import java.net.ServerSocket
import java.net.Socket
import java.util.HashMap

event SendMessage {
	var message : Message
	new (m : Message) {
		this.message = m;
	}
}

event ReadMessage
event CloseServer
event StopBuffer
event ReceivedMessage{
	var message : Message
	new (m : Message){
		message = m
	}
}


agent ServAgent {

	uses Logging, Lifecycle, DefaultContextInteractions
	
	
	var socketServer : ServerSocket
	var socket : Socket
	var reader : BufferedReader
	var writer : PrintWriter
	var gson : Gson
	
	def sendMessage(m : Message){
		emit (new SendMessage(m))
	}
	
	def readMessage(){
		emit (new ReadMessage())
	}

	on Initialize {

		info("Server Agent started")
		val port = 8080;
		gson = new Gson()
		socketServer = new ServerSocket(port)
		socket = socketServer.accept()
	 	info("Client connected to server")
		spawn(BufferReaderAgent, socket)
		writer = new PrintWriter(socket.getOutputStream());
		for(var i : int  = 0; i< 2; i++) 
			spawn(DroneAgent)
		
		
		//		spawn(testAgent2)
	 	

	}	
	
	on SendMessage {
		var message = occurrence.message
		var uuid = occurrence.source.getUUID
		
		message.UUID = uuid
		
		var jsonString = gson.toJson(message);
		
		writer.println(jsonString);
		writer.flush
	}
	
	on CloseServer {
		writer.close()
		socket.close()
		socketServer.close()
		killMe
	}
}
